/*
 * List
 *
 *  Created on: Oct 5, 2017
 *      Author: klibby
 */

#ifndef LIST_
#define LIST_
#include<iostream>
template <class T>
class Node{
public:
	Node(){
		this->_val=0;
		this->_next=0;
	}
	Node(T *_val){
		this->_val=_val;
		this->_next=0;
	}
	~Node(){
		delete _val;
	}
	void SetNext(Node *_next){
		this->_next= _next;
	}
	Node *GetNext(){
		return this->_next;
	}
	T *Get(){
		return this->_val;
	}
private:
	T *_val;
	Node *_next;
};

template <class T>
class List{
public:
	List(){
		this->_head=0;
		this->l_size=0;
	}
	void push_back(T *_val){

		//however it immediately sets it
		//to the val, which must be a valid
		//object
		if(!_head){
			_head= new Node<T>(_val);
			l_size++;
		}
		else{
			Node<T> *_curNode= new Node<T>;
			_curNode=_head;
			while(_curNode->GetNext()){
				_curNode=_curNode->GetNext();
			}
			_curNode->SetNext(new Node<T>(_val));
			l_size++;
		}
	}
	T at(int index){
		if(index>=l_size){
			std::cout<<"out of bounds call"<<std::endl;
		}
		Node<T> *_curNode= new Node<T>;
		_curNode=_head;
		for(int i=0; i<index; i++){
			_curNode=_curNode->GetNext();
		}
		return *(_curNode->Get());
	}
	void erase(int index){
		if(index>=l_size){
			std::cout<<"out of bounds call"<<std::endl;
		}
		Node<T> *_curNode= new Node<T>;
		Node<T> *_temp= new Node<T>;
		_curNode=_head;
		//stops before it hits the actual
		//item
		for(int i=0; i<index-1; i++){
			_curNode=_curNode->GetNext();
		}
		_temp=_curNode->GetNext();
		_curNode->SetNext(_temp->GetNext());
		l_size--;
		delete _temp;
	}
	T pop_front(){
		Node<T> *_newHead= new Node<T>();
		Node<T> headVal=*_head;
		_newHead=_head->GetNext();
		delete _head;
		_head=_newHead;
		l_size--;
		return *(headVal.Get());
	}
	T front(){
		return *(_head->Get());
	}
	int size(){
		return l_size;
	}
	void clear(){
		run_clear(_head);
		delete _head;
		_head=0;
		l_size=0;
	}
private:
	Node<T> *_head;
	int l_size;
	void run_clear(Node<T> *_head){
		if(_head->GetNext()){
			run_clear(_head->GetNext());
			delete _head->GetNext();
			_head->SetNext(0);
		}
	}
};


#endif /* LIST_ */

/*
 * List
 *
 *  Created on: Oct 5, 2017
 *      Author: klibby
 */

#ifndef LIST_
#define LIST_
#include<iostream>
template <class T>
class Node{
public:
	Node(){
		this->_val=0;
		this->_next=0;
	}
	Node(T *_val){
		this->_val=_val;
		this->_next=0;
	}
	~Node(){

	}
	void SetNext(Node *_next){
		this->_next= _next;
	}
	Node *GetNext(){
		return this->_next;
	}
	T *Get(){
		return this->_val;
	}
private:
	T *_val;
	Node *_next;
};

template <class T>
class List{
public:
	List(){
		this->_head=0;
		this->l_size=0;
	}
	~List(){
		clear();
	}
	void push_back(T *_val){

		//however it immediately sets it
		//to the val, which must be a valid
		//object
		if(!_head){
			_head= new Node<T>(_val);
			l_size++;
		}
		else{
			Node<T> *_curNode= _head;
			while(_curNode->GetNext()){
				_curNode=_curNode->GetNext();
			}
			_curNode->SetNext(new Node<T>(_val));
			l_size++;
		}
	}
	//this gets a member of the list at a specific index
	T *at(int index){
		if(index>=l_size){
			std::cout<<"out of bounds call"<<std::endl;
		}
		Node<T> *_curNode= new Node<T>;
		_curNode=_head;
		for(int i=0; i<index; i++){
			_curNode=_curNode->GetNext();
		}
		return _curNode->Get();
	}
	//this removes the first member of the list and returns its value
	T *pop_front(){
		Node<T> *_newHead= _head->GetNext();
		T *_headVal=_head->Get();
		delete _head;
		_head=_newHead;
		l_size--;
		return _headVal;
	}
	//this gets the pointer to the front-most object
	T *front(){
		return _head->Get();
	}
	//this gets the size
	int size(){
		return l_size;
	}
	//this clears the list
	void clear(){
		if(_head){
			Node<T> *_temp=_head->GetNext();
			while(_temp!=NULL){
				_head->SetNext(_temp->GetNext());
				_temp->SetNext(NULL);
				delete _temp;
				_temp=_head->GetNext();
			}
			delete _head;
		}
	}
private:
	Node<T> *_head;
	int l_size;
};


#endif /* LIST_ */
